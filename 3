import string

def generate_playfair_matrix(keyword):
    """Generate the 5x5 Playfair cipher matrix based on the given keyword."""
    keyword = keyword.lower().replace("j", "i")  # Playfair usually combines 'I' and 'J'
    seen = set()
    matrix = []
    
    # Add keyword letters first
    for char in keyword:
        if char in string.ascii_lowercase and char not in seen:
            matrix.append(char)
            seen.add(char)
    
    # Fill the rest of the matrix with remaining letters
    for char in string.ascii_lowercase.replace("j", ""):
        if char not in seen:
            matrix.append(char)
    
    return [matrix[i * 5: (i + 1) * 5] for i in range(5)]

def find_position(matrix, letter):
    """Find the row and column of a letter in the Playfair matrix."""
    for row in range(5):
        if letter in matrix[row]:
            return row, matrix[row].index(letter)
    return None

def process_digraphs(text):
    """Prepare plaintext into digraphs for Playfair encryption."""
    text = text.lower().replace("j", "i")  # Replace 'J' with 'I'
    text = "".join(filter(str.isalpha, text))  # Remove non-alphabetic characters
    digraphs = []
    
    i = 0
    while i < len(text):
        if i == len(text) - 1 or text[i] == text[i + 1]:  
            digraphs.append(text[i] + 'x')  # Insert 'X' if needed
            i += 1
        else:
            digraphs.append(text[i] + text[i + 1])
            i += 2
    
    return digraphs

def encrypt_digraph(digraph, matrix):
    """Encrypt a digraph using the Playfair cipher rules."""
    a, b = digraph
    row1, col1 = find_position(matrix, a)
    row2, col2 = find_position(matrix, b)

    if row1 == row2:  # Same row: shift right
        return matrix[row1][(col1 + 1) % 5] + matrix[row2][(col2 + 1) % 5]
    elif col1 == col2:  # Same column: shift down
        return matrix[(row1 + 1) % 5][col1] + matrix[(row2 + 1) % 5][col2]
    else:  # Rectangle swap
        return matrix[row1][col2] + matrix[row2][col1]

def decrypt_digraph(digraph, matrix):
    """Decrypt a digraph using the Playfair cipher rules."""
    a, b = digraph
    row1, col1 = find_position(matrix, a)
    row2, col2 = find_position(matrix, b)

    if row1 == row2:  # Same row: shift left
        return matrix[row1][(col1 - 1) % 5] + matrix[row2][(col2 - 1) % 5]
    elif col1 == col2:  # Same column: shift up
        return matrix[(row1 - 1) % 5][col1] + matrix[(row2 - 1) % 5][col2]
    else:  # Rectangle swap
        return matrix[row1][col2] + matrix[row2][col1]

def playfair_encrypt(plaintext, matrix):
    """Encrypt plaintext using Playfair cipher."""
    digraphs = process_digraphs(plaintext)
    return "".join(encrypt_digraph(digraph, matrix) for digraph in digraphs)

def playfair_decrypt(ciphertext, matrix):
    """Decrypt ciphertext using Playfair cipher."""
    digraphs = [ciphertext[i:i+2] for i in range(0, len(ciphertext), 2)]
    return "".join(decrypt_digraph(digraph, matrix) for digraph in digraphs)

# Get user input
keyword = input("Enter the Playfair cipher keyword: ")
matrix = generate_playfair_matrix(keyword)

# Display the 5x5 matrix
print("\nPlayfair Cipher Matrix:")
for row in matrix:
    print(" ".join(row))

# Encryption
plaintext = input("\nEnter plaintext to encrypt: ")
encrypted_text = playfair_encrypt(plaintext, matrix)
print("\nEncrypted Text:", encrypted_text.upper())

# Decryption
ciphertext = input("\nEnter ciphertext to decrypt: ")
decrypted_text = playfair_decrypt(ciphertext.lower(), matrix)
print("\nDecrypted Text:", decrypted_text)
