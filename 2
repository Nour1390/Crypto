import collections
import string


ENGLISH_FREQ_ORDER = "ETAOINSHRDLCUMWFGYPBVKJXQZ"

def frequency_analysis(ciphertext):
    """Perform frequency analysis on the ciphertext."""
    ciphertext = ciphertext.lower()
    letter_counts = collections.Counter(filter(str.isalpha, ciphertext))
    sorted_letters = [pair[0] for pair in letter_counts.most_common()]
    
    return sorted_letters

def create_decryption_key(cipher_freq_order):
    """Map the most common letters in ciphertext to standard English frequencies."""
    mapping = {}
    for i, cipher_letter in enumerate(cipher_freq_order):
        if i < len(ENGLISH_FREQ_ORDER):
            mapping[cipher_letter] = ENGLISH_FREQ_ORDER[i]
    return mapping

def decrypt(ciphertext, key_mapping):
    """Replace ciphertext letters using the estimated key mapping."""
    decrypted_text = "".join(key_mapping.get(char, char) for char in ciphertext.lower())
    return decrypted_text

def frequency_analysis_decrypt(ciphertext):
    """Full pipeline for frequency analysis-based decryption."""
    cipher_freq_order = frequency_analysis(ciphertext)
    key_mapping = create_decryption_key(cipher_freq_order)
    decrypted_text = decrypt(ciphertext, key_mapping)
    
    return decrypted_text
ciphertext = "wklv lv d whvw phvvdjh"  # Encrypted version of "this is a test message"


decrypted_text = frequency_analysis_decrypt(ciphertext)


print("Estimated Decryption:\n", decrypted_text)
